-- Name: James Silcott
-- Homework: ISTA421-Silcott
-- Date: Sep 24, 2020


Chapter 9:
1. The text contains the folowing:
I defined a Cart model class in the previous chapter and demonstrated how it can be stored
using the session feature, allowing the user to build up a set of products for purchase. The
responsibility for managing the persistence of the Cart class fell to the Cart Razor Page,
which has to deal with getting and storing Cart objects as session data.
The problem with this approach is that I will have to duplicate the code that obtains and
stores Cart objects in any other Razor Page or controller that uses them.
In your own words, describe thee “problem” the author identifies and explain why the proposed solution
is not satisfactory.

The problem with this approach is that I will have to duplicate the code that obtains and stores Cart objects in any other Razor
Page or controller that uses them. In this section, I am going to use the services feature that sits at the heart of ASP.NET Core to
simplify the way that Cart objects are managed, freeing individual components such as the Cart controller from needing to deal
with the details directly.




2. What are services, and how do they work.

Services are commonly used to hide details of how interfaces are implemented from the components that depend on them. But
services can be used to solve lots of other problems as well and can be used to shape and reshape an application, even when you are
working with concrete classes such as Cart.



3. (Not in book) The author states, “The static GetCart method is a factory for creating SessionCart
objects and providing them with an ISession object so they can store themselves.” What does he
mean by calling the GetCart method a factory?

GetCart is a static method which allows our controllers to obtain a cart object. It uses the GetCartId method to handle reading the CartId from the user's session. The GetCartId method requires the HttpContextBase so that it can read the user's CartId from user's session.


4. What does the AddScoped method do?
The AddScoped method specifies that the same object should be used to satisfy related requests for Cart instances. How
requests are related can be configured, but by default, it means that any Cart required by components handling the same HTTP
request will receive the same object.





5. How is an HTML form element with a tag handler of asp-page-handler programmed to execute the
functionality exposed by the form?

The new HTML content defines an HTML form. The handler method that will receive the request is specified with the asppage-
handler tag helper attribute, like this:
...
<form asp-page-handler="Remove" method="post">
...
The specified name is prefixed with On and given a suffix that matches the request type so that a value of Remove selects the
OnRemovePost handler method. The handler method uses the value it receives to locate the item in the cart and remove it.
Restart ASP.NET Core and request http://localhost:5000. Click the Add To Cart buttons to add items to the cart and then
click a Remove button. The cart will be updated to remove the item you specified, as shown in Figure




6. What does the BindNever attribute do? Why is it useful?

I also use the BindNever attribute, which prevents the user from supplying values for these properties in an HTTP request. This
is a feature of the model binding system, which I describe in Chapter 28, and it stops ASP.NET Core using values from the HTTP
request to populate sensitive or important model properties.



7. What does the tag helper <asp-for> do?

asp-for This attribute is used to specify the view model property that the input element represents.
The asp-for attribute on the input elements is handled by a built-in tag helper that
generates the type, id, name, and value attributes based on the specified model property, as described in Chapter 27.




8. Using Entity Framework, how do you add a new model to your database?


Adding a new kind of model to the database is simple because of the initial setup I went through in Chapter 7. First, I added a new
property to the database context class, as shown in Listing 9-15.
Listing 9-15. Adding a Property in the StoreDbContext.cs File in the SportsStore/Models Folder
using Microsoft.EntityFrameworkCore;
namespace SportsStore.Models {
public class StoreDbContext: DbContext {
public StoreDbContext(DbContextOptions<StoreDbContext> options)
: base(options) { }
public DbSet<Product> Products { get; set; }
public DbSet<Order> Orders { get; set; }
}
}
This change is enough for Entity Framework Core to create a database migration that will allow Order objects to be stored
in the database. To create the migration, use a PowerShell command prompt to run the command shown in Listing 9-16 in the
SportsStore folder.






9. What, speciically, does this command do: dotnet ef migrations add Model?


This command tells Entity Framework Core to take a new snapshot of the application data model, work out how it differs from
the previous database version, and generate a new migration called Orders. The new migration will be applied automatically when
the application starts because the SeedData calls the Migrate method provided by Entity Framework Core





10. How does Entity Framework understand to load data that is contained in multiple tables? For example,
suppose you want to load data from both Orders and Order.Details. What LINQ methods accomplish
this?

Entity Framework Core requires instruction to load related data if it spans multiple tables. In Listing 9-18, I used the Include and
ThenInclude methods to specify that when an Order object is read from the database, the collection associated with the Lines
property should also be loaded along with each Product object associated with each collection object

Include






11. Why do we validate data on the client side? Why do we validate data on the server side? What are
the advantages and disadvantages of cliet side validation and server side validation?

he data submitted by the user is sent to the server before it is validated, which is known as server-side validation and for
which ASP.NET Core has excellent support. The problem with server-side validation is that the user isn’t told about errors until after the
data has been sent to the server and processed and the result page has been generated—something that can take a few seconds on a
busy server. For this reason, server-side validation is usually complemented by client-side validation, where JavaScript is used to check
the values that the user has entered before the form data is sent to the server. I describe client-side validation in Chapter 29.








