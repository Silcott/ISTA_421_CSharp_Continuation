-- Name: James Silcott
-- Homework: ISTA421-Silcott
-- Date: Sep 24, 2020


Chapter 22:
1. Explain the difference between the concepts of associativity and precedence.

Each operator has a precedence. For example, the * operator has a higher precedence than the
+ operator. This means that the expression a + b * c is the same as a + (b * c).
■ Each operator also has an associativity that defi nes whether the operator evaluates from left to right or from right to left. For example, the = operator is right-associative (it evaluates from right to left), so a = b = c is the same as a = (b = c).


2. Explain the difference between the concepts of binary and unary operators.

unary operator is an operator that has just one operand. For example, the increment operator (++) is a unary operator.
■ A binary operator is an operator that has two operands. For example, the multiplication opera-
tor (*) is a binary operator


3. List four constraints imposed by C# with respect to operator overloading.

You cannot change the precedence and associativity of an operator. Precedence and
associativity are based on the operator symbol (for example, +) and not on the type (for example, int) on which the operator symbol is being used. Hence, the expression a + b * c is
always the same as a + (b * c) regardless of the types of a, b, and c.
■ You cannot change the multiplicity (the number of operands) of an operator. For example, * (the symbol for multiplication) is a binary operator. If you declare a * operator for your own type, it
must be a binary operator.
■ You cannot invent new operator symbols. For example, you can’t create an operator symbol such as ** for raising one number to the power of another number. You’d have to defi ne a
method to do that.
■ You can’t change the meaning of operators when they are applied to built-in types. For
example, the expression 1 + 2 has a predefi ned meaning, and you’re not allowed to override this
meaning. If you could do this, things would be too complicated.
■ There are some operator symbols that you can’t overload. For example, you can’t overload the
dot (.) operator, which indicates access to a class member. Again, if you could do this, it would
lead to unnecessary complexity


4. What is the syntax for overloading operators? Discuss access, scope, return value types, and parameter
types and multiplicity.

You use method-like
syntax with a return type and parameters, but the name of the method is the keyword operator
together with the operator symbol you are declaring. For example, the following code shows a user-
defi ned structure named Hour that defi nes a binary + operator to add together two instances of Hour


5. What are symmetric overloaded binary operators and how do they differ from non-symmetric overloaded binary operators?




6. Can you overload compound assignment operators? If so, please state how you do so. If not, explain
why not.

yes
Notice that operator ++ now creates a new object based on the data in the original. The data in
the new object is incremented, but the data in the original is left unchanged. Although this works, the
compiler translation of the increment operator results in a new object being created each time it is
used. This can be expensive in terms of memory use and garbage-collection overhead. Therefore, it is
recommended that you limit operator overloads when you defi ne types. This recommendation applies
to all operators, not just to the increment operator



7. What is the difference between overloading increment and decrement operators for value types and
reference types?

With C#, you can declare your own version of the increment (++) and decrement (- -) operators. The
usual rules apply when declaring these operators: they must be public, they must be static, and they must be unary (they can take only a single parameter). Here is the increment operator for the Hour
structure:
struct Hour
{
...
public static Hour operator ++(Hour arg)
{
arg.value++;
return arg;
}
...
private int value;
}
The increment and decrement operators are unique in that they can be used in prefi x and postfi x
forms. C# cleverly uses the same single operator for both the prefi x and postfi x versions. The result of
a postfi x expression is the value of the operand before the expression takes place. In other words, the
compiler effectively converts the code
Hour now = new Hour(9);
Hour postfix = now++;
From

8. Why do we overload some operators in pairs?

Overriding the equality operators
If you defi ne operator == and operator != in a class, you should also override the Equals and
GetHashCode methods inherited from System.Object (or System.ValueType if you are creating
a structure). The Equals method should exhibit the same behavior as operator ==. (You should defi ne one in terms of the other.) The GetHashCode method is used by other classes in the
Microsoft .NET Framework. (When you use an object as a key in a hash table, for example, the
GetHashCode method is called on the object to help calculate a hash value. For more informa-
tion, see the .NET Framework reference documentation supplied with Visual Studio 2017.) All this
method needs to do is return a distinguishing integer value. Don’t return the same integer from the GetHashCode method of all your objects, however, because this will nullify the effectiveness
of the hashing algorithms


9. What is the difference between widening conversion and narrowing conversion?

An implicit conversion is sometimes called a widening conversion because the result is wider than the
original value—it contains at least as much information as the original value, and nothing is lost. In the
case of int and double, the range of double is greater than that of int, and all int values have an equiva-
lent double value. However, the converse is not true, and a double value cannot be implicitly converted
to an int:
class Example
{
public static void MyIntMethod(int parameter)
{
...
}
}

An explicit conversion is sometimes called a narrowing conversion because the result is narrower
than the original value (that is, it can contain less information) and can throw an Overfl owException
exception if the resulting value is out of the range of the target type. In C#, you can create conversion
operators for your own user-defi ned types to control whether it is sensible to convert values to other
types, and you can also specify whether these conversions are implicit or explicit

10. What is the difference between explicit conversion and implicit conversion?

see answer 9


